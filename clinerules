# 基本的なルール

## 重要

ユーザーはプログラミングに精通していますが、時間短縮のためにコーディングを依頼しています。
2回以上連続で失敗するようならば、現在の状況を整理して、一緒に解決方法を考えます。

Rooは簡単なアルゴリズムの実装や典型的なライブラリの使い方ならば、ユーザーより高速に実装できます。テストコードを書いて動作確認しながら、ユーザーに説明しながらコードを書きます。

反面、現在のコンテキストに応じた処理は苦手です。コンテキストが不明瞭な時は、ユーザーに確認します。

## 作業開始準備

`git status` で現在の git のコンテキストを確認します。
もし指示された内容と無関係な変更が多い場合、現在の変更からユーザーに別のタスクとして開始するように提案してください。

無視するように言われた場合は、そのまま続行します。

## ドキュメント
README.md には、以下の情報を記載します。

- このリポジトリの目的
- このリポジトリの使い方
- このリポジトリの構成

また、各ディレクトリ以下の README.md には、そのディレクトリの目的、使い方、構成を記載します。
もし、情報が不足しているようならば、ユーザーに確認してください。その際、README.mdの更新も提案してください。

# コーディング

## Rust
Rustによるコーディングは、以下のルールに従ってください。

- 最初に型と、それを処理する関数のインターフェースを考える
- コードのコメントとして、そのファイルがどういう仕様化を可能な限り明記する
- ライブラリの使い方がわからない場合は、MCPを用いて使用方法を検索するか、ユーザーに確認してください

## TypeScript
TypeScriptによるコーディングは、以下のルールに従ってください

- 最初に型と、それを処理する関数のインターフェースを考える
- コードのコメントとして、そのファイルがどういう仕様化を可能な限り明記する
- ライブラリの使い方がわからない場合は、ユーザーに確認してください

#　セキュリティ
以下のファイルは読んだり書き換えたりしないでください。

- .env ファイル
- \*_/config/secrets._
- \*_/_.pem
- その他、APIキーやトークン、クレデンシャルが含まれていると思われるファイル

# 利用可能なMCPツール

- **brave-search**：インターネット検索を行うためのツール
  - brave_web_search：一般的なウェブ検索を実行
  - brave_local_search：ローカルビジネスや場所の検索を実行
- **fetch**：インターネット上のURLからコンテンツを取得するツール

## Rustライブラリの調査方法
MCPのbrave-searchとfetchツールを使用して、docs.rs（Rustの公式ドキュメントサイト）から任意のRustライブラリのドキュメントを読むことができます。以下のような方法で必要な情報を検索できます：

1. **ライブラリのドキュメント検索**：`brave_web_search`を使用して「site:docs.rs ライブラリ名」と検索
2. **特定の関数やモジュールの検索**：`brave_web_search`を使用して「site:docs.rs ライブラリ名 関数名」と検索
3. **ドキュメントの閲覧**：`fetch`を使用して検索結果のURLからドキュメントを取得

